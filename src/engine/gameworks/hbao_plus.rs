/* automatically generated by rust-bindgen */

pub const _WINDLL: u32 = 1;
pub const _SAL_VERSION: u32 = 20;
pub const __SAL_H_VERSION: u32 = 180000000;
pub const _USE_DECLSPECS_FOR_SAL: u32 = 0;
pub const _USE_ATTRIBUTES_FOR_SAL: u32 = 0;
pub const _CRT_PACKING: u32 = 8;
pub const _HAS_EXCEPTIONS: u32 = 1;
pub const NULL: u32 = 0;
pub const _HAS_CXX17: u32 = 0;
pub const _HAS_CXX20: u32 = 0;
pub const _HAS_NODISCARD: u32 = 0;
pub const _ARGMAX: u32 = 100;
pub const _CRT_INT_MAX: u32 = 2147483647;
pub const _CRT_FUNCTIONS_REQUIRED: u32 = 1;
pub const _CRT_HAS_CXX17: u32 = 0;
pub const _ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE: u32 = 1;
pub const _CRT_BUILD_DESKTOP_APP: u32 = 1;
pub const _CRT_INTERNAL_NONSTDC_NAMES: u32 = 1;
pub const __STDC_SECURE_LIB__: u32 = 200411;
pub const __GOT_SECURE_LIB__: u32 = 200411;
pub const __STDC_WANT_SECURE_LIB__: u32 = 1;
pub const _SECURECRT_FILL_BUFFER_PATTERN: u32 = 254;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES: u32 = 1;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY: u32 = 0;
pub const WCHAR_MIN: u32 = 0;
pub const WCHAR_MAX: u32 = 65535;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 65535;
pub const EPERM: u32 = 1;
pub const ENOENT: u32 = 2;
pub const ESRCH: u32 = 3;
pub const EINTR: u32 = 4;
pub const EIO: u32 = 5;
pub const ENXIO: u32 = 6;
pub const E2BIG: u32 = 7;
pub const ENOEXEC: u32 = 8;
pub const EBADF: u32 = 9;
pub const ECHILD: u32 = 10;
pub const EAGAIN: u32 = 11;
pub const ENOMEM: u32 = 12;
pub const EACCES: u32 = 13;
pub const EFAULT: u32 = 14;
pub const EBUSY: u32 = 16;
pub const EEXIST: u32 = 17;
pub const EXDEV: u32 = 18;
pub const ENODEV: u32 = 19;
pub const ENOTDIR: u32 = 20;
pub const EISDIR: u32 = 21;
pub const ENFILE: u32 = 23;
pub const EMFILE: u32 = 24;
pub const ENOTTY: u32 = 25;
pub const EFBIG: u32 = 27;
pub const ENOSPC: u32 = 28;
pub const ESPIPE: u32 = 29;
pub const EROFS: u32 = 30;
pub const EMLINK: u32 = 31;
pub const EPIPE: u32 = 32;
pub const EDOM: u32 = 33;
pub const EDEADLK: u32 = 36;
pub const ENAMETOOLONG: u32 = 38;
pub const ENOLCK: u32 = 39;
pub const ENOSYS: u32 = 40;
pub const ENOTEMPTY: u32 = 41;
pub const EINVAL: u32 = 22;
pub const ERANGE: u32 = 34;
pub const EILSEQ: u32 = 42;
pub const STRUNCATE: u32 = 80;
pub const EDEADLOCK: u32 = 36;
pub const EADDRINUSE: u32 = 100;
pub const EADDRNOTAVAIL: u32 = 101;
pub const EAFNOSUPPORT: u32 = 102;
pub const EALREADY: u32 = 103;
pub const EBADMSG: u32 = 104;
pub const ECANCELED: u32 = 105;
pub const ECONNABORTED: u32 = 106;
pub const ECONNREFUSED: u32 = 107;
pub const ECONNRESET: u32 = 108;
pub const EDESTADDRREQ: u32 = 109;
pub const EHOSTUNREACH: u32 = 110;
pub const EIDRM: u32 = 111;
pub const EINPROGRESS: u32 = 112;
pub const EISCONN: u32 = 113;
pub const ELOOP: u32 = 114;
pub const EMSGSIZE: u32 = 115;
pub const ENETDOWN: u32 = 116;
pub const ENETRESET: u32 = 117;
pub const ENETUNREACH: u32 = 118;
pub const ENOBUFS: u32 = 119;
pub const ENODATA: u32 = 120;
pub const ENOLINK: u32 = 121;
pub const ENOMSG: u32 = 122;
pub const ENOPROTOOPT: u32 = 123;
pub const ENOSR: u32 = 124;
pub const ENOSTR: u32 = 125;
pub const ENOTCONN: u32 = 126;
pub const ENOTRECOVERABLE: u32 = 127;
pub const ENOTSOCK: u32 = 128;
pub const ENOTSUP: u32 = 129;
pub const EOPNOTSUPP: u32 = 130;
pub const EOTHER: u32 = 131;
pub const EOVERFLOW: u32 = 132;
pub const EOWNERDEAD: u32 = 133;
pub const EPROTO: u32 = 134;
pub const EPROTONOSUPPORT: u32 = 135;
pub const EPROTOTYPE: u32 = 136;
pub const ETIME: u32 = 137;
pub const ETIMEDOUT: u32 = 138;
pub const ETXTBSY: u32 = 139;
pub const EWOULDBLOCK: u32 = 140;
pub const _NLSCMPERROR: u32 = 2147483647;
pub const GFSDK_SSAO_NUM_DESCRIPTORS_RTV_HEAP_D3D12: u32 = 40;
pub const GFSDK_SSAO_NUM_DESCRIPTORS_CBV_SRV_UAV_HEAP_D3D12: u32 = 60;
pub type va_list = *mut ::std::os::raw::c_char;
extern "C" {
    pub fn __va_start(arg1: *mut va_list, ...);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __vcrt_va_list_is_reference {
    pub _address: u8,
}
pub const __vcrt_va_list_is_reference___the_value: __vcrt_va_list_is_reference__bindgen_ty_1 = 0;
pub type __vcrt_va_list_is_reference__bindgen_ty_1 = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __vcrt_assert_va_start_is_not_reference {
    pub _address: u8,
}
pub type __vcrt_bool = bool;
extern "C" {
    pub fn __security_init_cookie();
}
extern "C" {
    pub fn __security_check_cookie(_StackCookie: usize);
}
extern "C" {
    pub fn __report_gsfailure(_StackCookie: usize);
}
extern "C" {
    pub static mut __security_cookie: usize;
}
pub type __crt_bool = bool;
extern "C" {
    pub fn _invalid_parameter_noinfo();
}
extern "C" {
    pub fn _invalid_parameter_noinfo_noreturn();
}
extern "C" {
    pub fn _invoke_watson(
        _Expression: *const u16,
        _FunctionName: *const u16,
        _FileName: *const u16,
        _LineNo: ::std::os::raw::c_uint,
        _Reserved: usize,
    );
}
pub type errno_t = ::std::os::raw::c_int;
pub type wint_t = ::std::os::raw::c_ushort;
pub type wctype_t = ::std::os::raw::c_ushort;
pub type __time32_t = ::std::os::raw::c_long;
pub type __time64_t = ::std::os::raw::c_longlong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data_public {
    pub _locale_pctype: *const ::std::os::raw::c_ushort,
    pub _locale_mb_cur_max: ::std::os::raw::c_int,
    pub _locale_lc_codepage: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___crt_locale_data_public() {
    assert_eq!(
        ::std::mem::size_of::<__crt_locale_data_public>(),
        16usize,
        concat!("Size of: ", stringify!(__crt_locale_data_public))
    );
    assert_eq!(
        ::std::mem::align_of::<__crt_locale_data_public>(),
        8usize,
        concat!("Alignment of ", stringify!(__crt_locale_data_public))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__crt_locale_data_public>()))._locale_pctype as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_data_public),
            "::",
            stringify!(_locale_pctype)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__crt_locale_data_public>()))._locale_mb_cur_max as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_data_public),
            "::",
            stringify!(_locale_mb_cur_max)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__crt_locale_data_public>()))._locale_lc_codepage as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_data_public),
            "::",
            stringify!(_locale_lc_codepage)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_pointers {
    pub locinfo: *mut __crt_locale_data,
    pub mbcinfo: *mut __crt_multibyte_data,
}
#[test]
fn bindgen_test_layout___crt_locale_pointers() {
    assert_eq!(
        ::std::mem::size_of::<__crt_locale_pointers>(),
        16usize,
        concat!("Size of: ", stringify!(__crt_locale_pointers))
    );
    assert_eq!(
        ::std::mem::align_of::<__crt_locale_pointers>(),
        8usize,
        concat!("Alignment of ", stringify!(__crt_locale_pointers))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__crt_locale_pointers>())).locinfo as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_pointers),
            "::",
            stringify!(locinfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__crt_locale_pointers>())).mbcinfo as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_pointers),
            "::",
            stringify!(mbcinfo)
        )
    );
}
pub type _locale_t = *mut __crt_locale_pointers;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _Mbstatet {
    pub _Wchar: ::std::os::raw::c_ulong,
    pub _Byte: ::std::os::raw::c_ushort,
    pub _State: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout__Mbstatet() {
    assert_eq!(
        ::std::mem::size_of::<_Mbstatet>(),
        8usize,
        concat!("Size of: ", stringify!(_Mbstatet))
    );
    assert_eq!(
        ::std::mem::align_of::<_Mbstatet>(),
        4usize,
        concat!("Alignment of ", stringify!(_Mbstatet))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Mbstatet>()))._Wchar as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_Mbstatet),
            "::",
            stringify!(_Wchar)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Mbstatet>()))._Byte as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_Mbstatet),
            "::",
            stringify!(_Byte)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Mbstatet>()))._State as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_Mbstatet),
            "::",
            stringify!(_State)
        )
    );
}
pub type mbstate_t = _Mbstatet;
pub type time_t = __time64_t;
pub type rsize_t = usize;
pub type std_nullptr_t = *const ::std::os::raw::c_void;
extern "C" {
    pub fn _errno() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn _set_errno(_Value: ::std::os::raw::c_int) -> errno_t;
}
extern "C" {
    pub fn _get_errno(_Value: *mut ::std::os::raw::c_int) -> errno_t;
}
extern "C" {
    pub fn __threadid() -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn __threadhandle() -> usize;
}
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_longlong;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulonglong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_int;
pub type int_fast32_t = ::std::os::raw::c_int;
pub type int_fast64_t = ::std::os::raw::c_longlong;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_uint;
pub type uint_fast32_t = ::std::os::raw::c_uint;
pub type uint_fast64_t = ::std::os::raw::c_ulonglong;
pub type intmax_t = ::std::os::raw::c_longlong;
pub type uintmax_t = ::std::os::raw::c_ulonglong;
extern "C" {
    pub fn __doserrno() -> *mut ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _set_doserrno(_Value: ::std::os::raw::c_ulong) -> errno_t;
}
extern "C" {
    pub fn _get_doserrno(_Value: *mut ::std::os::raw::c_ulong) -> errno_t;
}
extern "C" {
    pub fn memchr(
        _Buf: *const ::std::os::raw::c_void,
        _Val: ::std::os::raw::c_int,
        _MaxCount: usize,
    ) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn memcmp(
        _Buf1: *const ::std::os::raw::c_void,
        _Buf2: *const ::std::os::raw::c_void,
        _Size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memcpy(
        _Dst: *mut ::std::os::raw::c_void,
        _Src: *const ::std::os::raw::c_void,
        _Size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memmove(
        _Dst: *mut ::std::os::raw::c_void,
        _Src: *const ::std::os::raw::c_void,
        _Size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset(
        _Dst: *mut ::std::os::raw::c_void,
        _Val: ::std::os::raw::c_int,
        _Size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strchr(
        _Str: *const ::std::os::raw::c_char,
        _Val: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn strrchr(
        _Str: *const ::std::os::raw::c_char,
        _Ch: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn strstr(
        _Str: *const ::std::os::raw::c_char,
        _SubStr: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn wcschr(_Str: *const u16, _Ch: u16) -> *const u16;
}
extern "C" {
    pub fn wcsrchr(_Str: *const u16, _Ch: u16) -> *const u16;
}
extern "C" {
    pub fn wcsstr(_Str: *const u16, _SubStr: *const u16) -> *const u16;
}
extern "C" {
    pub fn _memicmp(
        _Buf1: *const ::std::os::raw::c_void,
        _Buf2: *const ::std::os::raw::c_void,
        _Size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _memicmp_l(
        _Buf1: *const ::std::os::raw::c_void,
        _Buf2: *const ::std::os::raw::c_void,
        _Size: usize,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memccpy(
        _Dst: *mut ::std::os::raw::c_void,
        _Src: *const ::std::os::raw::c_void,
        _Val: ::std::os::raw::c_int,
        _Size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memicmp(
        _Buf1: *const ::std::os::raw::c_void,
        _Buf2: *const ::std::os::raw::c_void,
        _Size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcscat_s(_Destination: *mut u16, _SizeInWords: rsize_t, _Source: *const u16) -> errno_t;
}
extern "C" {
    pub fn wcscpy_s(_Destination: *mut u16, _SizeInWords: rsize_t, _Source: *const u16) -> errno_t;
}
extern "C" {
    pub fn wcsncat_s(
        _Destination: *mut u16,
        _SizeInWords: rsize_t,
        _Source: *const u16,
        _MaxCount: rsize_t,
    ) -> errno_t;
}
extern "C" {
    pub fn wcsncpy_s(
        _Destination: *mut u16,
        _SizeInWords: rsize_t,
        _Source: *const u16,
        _MaxCount: rsize_t,
    ) -> errno_t;
}
extern "C" {
    pub fn wcstok_s(_String: *mut u16, _Delimiter: *const u16, _Context: *mut *mut u16)
        -> *mut u16;
}
extern "C" {
    pub fn _wcsdup(_String: *const u16) -> *mut u16;
}
extern "C" {
    pub fn wcscat(_Destination: *mut u16, _Source: *const u16) -> *mut u16;
}
extern "C" {
    pub fn wcscmp(_String1: *const u16, _String2: *const u16) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcscpy(_Destination: *mut u16, _Source: *const u16) -> *mut u16;
}
extern "C" {
    pub fn wcscspn(_String: *const u16, _Control: *const u16) -> usize;
}
extern "C" {
    pub fn wcslen(_String: *const u16) -> usize;
}
extern "C" {
    pub fn wcsnlen(_Source: *const u16, _MaxCount: usize) -> usize;
}
extern "C" {
    pub fn wcsncat(_Destination: *mut u16, _Source: *const u16, _Count: usize) -> *mut u16;
}
extern "C" {
    pub fn wcsncmp(
        _String1: *const u16,
        _String2: *const u16,
        _MaxCount: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsncpy(_Destination: *mut u16, _Source: *const u16, _Count: usize) -> *mut u16;
}
extern "C" {
    pub fn wcspbrk(_String: *const u16, _Control: *const u16) -> *const u16;
}
extern "C" {
    pub fn wcsspn(_String: *const u16, _Control: *const u16) -> usize;
}
extern "C" {
    pub fn wcstok(_String: *mut u16, _Delimiter: *const u16, _Context: *mut *mut u16) -> *mut u16;
}
extern "C" {
    pub fn _wcserror(_ErrorNumber: ::std::os::raw::c_int) -> *mut u16;
}
extern "C" {
    pub fn _wcserror_s(
        _Buffer: *mut u16,
        _SizeInWords: usize,
        _ErrorNumber: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn __wcserror(_String: *const u16) -> *mut u16;
}
extern "C" {
    pub fn __wcserror_s(
        _Buffer: *mut u16,
        _SizeInWords: usize,
        _ErrorMessage: *const u16,
    ) -> errno_t;
}
extern "C" {
    pub fn _wcsicmp(_String1: *const u16, _String2: *const u16) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsicmp_l(
        _String1: *const u16,
        _String2: *const u16,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsnicmp(
        _String1: *const u16,
        _String2: *const u16,
        _MaxCount: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsnicmp_l(
        _String1: *const u16,
        _String2: *const u16,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsnset_s(
        _Destination: *mut u16,
        _SizeInWords: usize,
        _Value: u16,
        _MaxCount: usize,
    ) -> errno_t;
}
extern "C" {
    pub fn _wcsnset(_String: *mut u16, _Value: u16, _MaxCount: usize) -> *mut u16;
}
extern "C" {
    pub fn _wcsrev(_String: *mut u16) -> *mut u16;
}
extern "C" {
    pub fn _wcsset_s(_Destination: *mut u16, _SizeInWords: usize, _Value: u16) -> errno_t;
}
extern "C" {
    pub fn _wcsset(_String: *mut u16, _Value: u16) -> *mut u16;
}
extern "C" {
    pub fn _wcslwr_s(_String: *mut u16, _SizeInWords: usize) -> errno_t;
}
extern "C" {
    pub fn _wcslwr(_String: *mut u16) -> *mut u16;
}
extern "C" {
    pub fn _wcslwr_s_l(_String: *mut u16, _SizeInWords: usize, _Locale: _locale_t) -> errno_t;
}
extern "C" {
    pub fn _wcslwr_l(_String: *mut u16, _Locale: _locale_t) -> *mut u16;
}
extern "C" {
    pub fn _wcsupr_s(_String: *mut u16, _Size: usize) -> errno_t;
}
extern "C" {
    pub fn _wcsupr(_String: *mut u16) -> *mut u16;
}
extern "C" {
    pub fn _wcsupr_s_l(_String: *mut u16, _Size: usize, _Locale: _locale_t) -> errno_t;
}
extern "C" {
    pub fn _wcsupr_l(_String: *mut u16, _Locale: _locale_t) -> *mut u16;
}
extern "C" {
    pub fn wcsxfrm(_Destination: *mut u16, _Source: *const u16, _MaxCount: usize) -> usize;
}
extern "C" {
    pub fn _wcsxfrm_l(
        _Destination: *mut u16,
        _Source: *const u16,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> usize;
}
extern "C" {
    pub fn wcscoll(_String1: *const u16, _String2: *const u16) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcscoll_l(
        _String1: *const u16,
        _String2: *const u16,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsicoll(_String1: *const u16, _String2: *const u16) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsicoll_l(
        _String1: *const u16,
        _String2: *const u16,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsncoll(
        _String1: *const u16,
        _String2: *const u16,
        _MaxCount: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsncoll_l(
        _String1: *const u16,
        _String2: *const u16,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsnicoll(
        _String1: *const u16,
        _String2: *const u16,
        _MaxCount: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsnicoll_l(
        _String1: *const u16,
        _String2: *const u16,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsdup(_String: *const u16) -> *mut u16;
}
extern "C" {
    pub fn wcsicmp(_String1: *const u16, _String2: *const u16) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsnicmp(
        _String1: *const u16,
        _String2: *const u16,
        _MaxCount: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsnset(_String: *mut u16, _Value: u16, _MaxCount: usize) -> *mut u16;
}
extern "C" {
    pub fn wcsrev(_String: *mut u16) -> *mut u16;
}
extern "C" {
    pub fn wcsset(_String: *mut u16, _Value: u16) -> *mut u16;
}
extern "C" {
    pub fn wcslwr(_String: *mut u16) -> *mut u16;
}
extern "C" {
    pub fn wcsupr(_String: *mut u16) -> *mut u16;
}
extern "C" {
    pub fn wcsicoll(_String1: *const u16, _String2: *const u16) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcpy_s(
        _Destination: *mut ::std::os::raw::c_char,
        _SizeInBytes: rsize_t,
        _Source: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn strcat_s(
        _Destination: *mut ::std::os::raw::c_char,
        _SizeInBytes: rsize_t,
        _Source: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn strerror_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _SizeInBytes: usize,
        _ErrorNumber: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn strncat_s(
        _Destination: *mut ::std::os::raw::c_char,
        _SizeInBytes: rsize_t,
        _Source: *const ::std::os::raw::c_char,
        _MaxCount: rsize_t,
    ) -> errno_t;
}
extern "C" {
    pub fn strncpy_s(
        _Destination: *mut ::std::os::raw::c_char,
        _SizeInBytes: rsize_t,
        _Source: *const ::std::os::raw::c_char,
        _MaxCount: rsize_t,
    ) -> errno_t;
}
extern "C" {
    pub fn strtok_s(
        _String: *mut ::std::os::raw::c_char,
        _Delimiter: *const ::std::os::raw::c_char,
        _Context: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _memccpy(
        _Dst: *mut ::std::os::raw::c_void,
        _Src: *const ::std::os::raw::c_void,
        _Val: ::std::os::raw::c_int,
        _MaxCount: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strcat(
        _Destination: *mut ::std::os::raw::c_char,
        _Source: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcmp(
        _Str1: *const ::std::os::raw::c_char,
        _Str2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _strcmpi(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcoll(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _strcoll_l(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcpy(
        _Destination: *mut ::std::os::raw::c_char,
        _Source: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcspn(
        _Str: *const ::std::os::raw::c_char,
        _Control: *const ::std::os::raw::c_char,
    ) -> usize;
}
extern "C" {
    pub fn _strdup(_Source: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _strerror(_ErrorMessage: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _strerror_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _SizeInBytes: usize,
        _ErrorMessage: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn strerror(_ErrorMessage: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _stricmp(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _stricoll(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _stricoll_l(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _stricmp_l(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strlen(_Str: *const ::std::os::raw::c_char) -> usize;
}
extern "C" {
    pub fn _strlwr_s(_String: *mut ::std::os::raw::c_char, _Size: usize) -> errno_t;
}
extern "C" {
    pub fn _strlwr(_String: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _strlwr_s_l(
        _String: *mut ::std::os::raw::c_char,
        _Size: usize,
        _Locale: _locale_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _strlwr_l(
        _String: *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncat(
        _Destination: *mut ::std::os::raw::c_char,
        _Source: *const ::std::os::raw::c_char,
        _Count: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncmp(
        _Str1: *const ::std::os::raw::c_char,
        _Str2: *const ::std::os::raw::c_char,
        _MaxCount: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _strnicmp(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _MaxCount: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _strnicmp_l(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _strnicoll(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _MaxCount: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _strnicoll_l(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _strncoll(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _MaxCount: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _strncoll_l(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __strncnt(_String: *const ::std::os::raw::c_char, _Count: usize) -> usize;
}
extern "C" {
    pub fn strncpy(
        _Destination: *mut ::std::os::raw::c_char,
        _Source: *const ::std::os::raw::c_char,
        _Count: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strnlen(_String: *const ::std::os::raw::c_char, _MaxCount: usize) -> usize;
}
extern "C" {
    pub fn _strnset_s(
        _String: *mut ::std::os::raw::c_char,
        _SizeInBytes: usize,
        _Value: ::std::os::raw::c_int,
        _MaxCount: usize,
    ) -> errno_t;
}
extern "C" {
    pub fn _strnset(
        _Destination: *mut ::std::os::raw::c_char,
        _Value: ::std::os::raw::c_int,
        _Count: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strpbrk(
        _Str: *const ::std::os::raw::c_char,
        _Control: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn _strrev(_Str: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _strset_s(
        _Destination: *mut ::std::os::raw::c_char,
        _DestinationSize: usize,
        _Value: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _strset(
        _Destination: *mut ::std::os::raw::c_char,
        _Value: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strspn(
        _Str: *const ::std::os::raw::c_char,
        _Control: *const ::std::os::raw::c_char,
    ) -> usize;
}
extern "C" {
    pub fn strtok(
        _String: *mut ::std::os::raw::c_char,
        _Delimiter: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _strupr_s(_String: *mut ::std::os::raw::c_char, _Size: usize) -> errno_t;
}
extern "C" {
    pub fn _strupr(_String: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _strupr_s_l(
        _String: *mut ::std::os::raw::c_char,
        _Size: usize,
        _Locale: _locale_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _strupr_l(
        _String: *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strxfrm(
        _Destination: *mut ::std::os::raw::c_char,
        _Source: *const ::std::os::raw::c_char,
        _MaxCount: usize,
    ) -> usize;
}
extern "C" {
    pub fn _strxfrm_l(
        _Destination: *mut ::std::os::raw::c_char,
        _Source: *const ::std::os::raw::c_char,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> usize;
}
extern "C" {
    pub fn strdup(_String: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcmpi(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn stricmp(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strlwr(_String: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strnicmp(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _MaxCount: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strnset(
        _String: *mut ::std::os::raw::c_char,
        _Value: ::std::os::raw::c_int,
        _MaxCount: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strrev(_String: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strset(
        _String: *mut ::std::os::raw::c_char,
        _Value: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strupr(_String: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
pub type GFSDK_SSAO_BOOL = ::std::os::raw::c_uint;
pub type GFSDK_SSAO_UINT = ::std::os::raw::c_uint;
pub type GFSDK_SSAO_FLOAT = f32;
pub type GFSDK_SSAO_SIZE_T = usize;
pub type GFSDK_SSAO_UINT64 = u64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ID3D11Device {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ID3D11DeviceContext {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ID3D11ShaderResourceView {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ID3D11BlendState {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ID3D11DepthStencilState {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ID3D11DepthStencilView {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ID3D11RenderTargetView {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ID3D12Device {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ID3D12CommandQueue {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ID3D12GraphicsCommandList {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ID3D12Resource {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ID3D12DescriptorHeap {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct D3D12_BLEND_DESC {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GFSDK_SSAO_Version {
    pub Major: GFSDK_SSAO_UINT,
    pub Minor: GFSDK_SSAO_UINT,
    pub Branch: GFSDK_SSAO_UINT,
    pub Revision: GFSDK_SSAO_UINT,
}
#[test]
fn bindgen_test_layout_GFSDK_SSAO_Version() {
    assert_eq!(
        ::std::mem::size_of::<GFSDK_SSAO_Version>(),
        16usize,
        concat!("Size of: ", stringify!(GFSDK_SSAO_Version))
    );
    assert_eq!(
        ::std::mem::align_of::<GFSDK_SSAO_Version>(),
        4usize,
        concat!("Alignment of ", stringify!(GFSDK_SSAO_Version))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GFSDK_SSAO_Version>())).Major as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GFSDK_SSAO_Version),
            "::",
            stringify!(Major)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GFSDK_SSAO_Version>())).Minor as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(GFSDK_SSAO_Version),
            "::",
            stringify!(Minor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GFSDK_SSAO_Version>())).Branch as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GFSDK_SSAO_Version),
            "::",
            stringify!(Branch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GFSDK_SSAO_Version>())).Revision as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(GFSDK_SSAO_Version),
            "::",
            stringify!(Revision)
        )
    );
}
pub const GFSDK_SSAO_Status_GFSDK_SSAO_OK: GFSDK_SSAO_Status = 0;
pub const GFSDK_SSAO_Status_GFSDK_SSAO_VERSION_MISMATCH: GFSDK_SSAO_Status = 1;
pub const GFSDK_SSAO_Status_GFSDK_SSAO_NULL_ARGUMENT: GFSDK_SSAO_Status = 2;
pub const GFSDK_SSAO_Status_GFSDK_SSAO_INVALID_PROJECTION_MATRIX: GFSDK_SSAO_Status = 3;
pub const GFSDK_SSAO_Status_GFSDK_SSAO_INVALID_WORLD_TO_VIEW_MATRIX: GFSDK_SSAO_Status = 4;
pub const GFSDK_SSAO_Status_GFSDK_SSAO_INVALID_NORMAL_TEXTURE_RESOLUTION: GFSDK_SSAO_Status = 5;
pub const GFSDK_SSAO_Status_GFSDK_SSAO_INVALID_NORMAL_TEXTURE_SAMPLE_COUNT: GFSDK_SSAO_Status = 6;
pub const GFSDK_SSAO_Status_GFSDK_SSAO_INVALID_VIEWPORT_DIMENSIONS: GFSDK_SSAO_Status = 7;
pub const GFSDK_SSAO_Status_GFSDK_SSAO_INVALID_VIEWPORT_DEPTH_RANGE: GFSDK_SSAO_Status = 8;
pub const GFSDK_SSAO_Status_GFSDK_SSAO_INVALID_SECOND_DEPTH_TEXTURE_RESOLUTION: GFSDK_SSAO_Status =
    9;
pub const GFSDK_SSAO_Status_GFSDK_SSAO_INVALID_SECOND_DEPTH_TEXTURE_SAMPLE_COUNT:
    GFSDK_SSAO_Status = 10;
pub const GFSDK_SSAO_Status_GFSDK_SSAO_MEMORY_ALLOCATION_FAILED: GFSDK_SSAO_Status = 11;
pub const GFSDK_SSAO_Status_GFSDK_SSAO_INVALID_DEPTH_STENCIL_RESOLUTION: GFSDK_SSAO_Status = 12;
pub const GFSDK_SSAO_Status_GFSDK_SSAO_INVALID_DEPTH_STENCIL_SAMPLE_COUNT: GFSDK_SSAO_Status = 13;
pub const GFSDK_SSAO_Status_GFSDK_SSAO_D3D_FEATURE_LEVEL_NOT_SUPPORTED: GFSDK_SSAO_Status = 14;
pub const GFSDK_SSAO_Status_GFSDK_SSAO_D3D_RESOURCE_CREATION_FAILED: GFSDK_SSAO_Status = 15;
pub const GFSDK_SSAO_Status_GFSDK_SSAO_D3D12_UNSUPPORTED_DEPTH_CLAMP_MODE: GFSDK_SSAO_Status = 16;
pub const GFSDK_SSAO_Status_GFSDK_SSAO_D3D12_INVALID_HEAP_TYPE: GFSDK_SSAO_Status = 17;
pub const GFSDK_SSAO_Status_GFSDK_SSAO_D3D12_INSUFFICIENT_DESCRIPTORS: GFSDK_SSAO_Status = 18;
pub const GFSDK_SSAO_Status_GFSDK_SSAO_D3D12_INVALID_NODE_MASK: GFSDK_SSAO_Status = 19;
pub const GFSDK_SSAO_Status_GFSDK_SSAO_NO_SECOND_LAYER_PROVIDED: GFSDK_SSAO_Status = 20;
pub type GFSDK_SSAO_Status = i32;
pub const GFSDK_SSAO_DepthTextureType_GFSDK_SSAO_HARDWARE_DEPTHS: GFSDK_SSAO_DepthTextureType = 0;
pub const GFSDK_SSAO_DepthTextureType_GFSDK_SSAO_HARDWARE_DEPTHS_SUB_RANGE:
    GFSDK_SSAO_DepthTextureType = 1;
pub const GFSDK_SSAO_DepthTextureType_GFSDK_SSAO_VIEW_DEPTHS: GFSDK_SSAO_DepthTextureType = 2;
pub type GFSDK_SSAO_DepthTextureType = i32;
pub const GFSDK_SSAO_BlendMode_GFSDK_SSAO_OVERWRITE_RGB: GFSDK_SSAO_BlendMode = 0;
pub const GFSDK_SSAO_BlendMode_GFSDK_SSAO_MULTIPLY_RGB: GFSDK_SSAO_BlendMode = 1;
pub const GFSDK_SSAO_BlendMode_GFSDK_SSAO_CUSTOM_BLEND: GFSDK_SSAO_BlendMode = 2;
pub type GFSDK_SSAO_BlendMode = i32;
pub const GFSDK_SSAO_DepthStencilMode_GFSDK_SSAO_DISABLED_DEPTH_STENCIL:
    GFSDK_SSAO_DepthStencilMode = 0;
pub const GFSDK_SSAO_DepthStencilMode_GFSDK_SSAO_CUSTOM_DEPTH_STENCIL: GFSDK_SSAO_DepthStencilMode =
    1;
pub type GFSDK_SSAO_DepthStencilMode = i32;
pub const GFSDK_SSAO_BlurRadius_GFSDK_SSAO_BLUR_RADIUS_2: GFSDK_SSAO_BlurRadius = 0;
pub const GFSDK_SSAO_BlurRadius_GFSDK_SSAO_BLUR_RADIUS_4: GFSDK_SSAO_BlurRadius = 1;
pub type GFSDK_SSAO_BlurRadius = i32;
pub const GFSDK_SSAO_DepthStorage_GFSDK_SSAO_FP16_VIEW_DEPTHS: GFSDK_SSAO_DepthStorage = 0;
pub const GFSDK_SSAO_DepthStorage_GFSDK_SSAO_FP32_VIEW_DEPTHS: GFSDK_SSAO_DepthStorage = 1;
pub type GFSDK_SSAO_DepthStorage = i32;
pub const GFSDK_SSAO_StepCount_GFSDK_SSAO_STEP_COUNT_4: GFSDK_SSAO_StepCount = 0;
pub const GFSDK_SSAO_StepCount_GFSDK_SSAO_STEP_COUNT_8: GFSDK_SSAO_StepCount = 1;
pub type GFSDK_SSAO_StepCount = i32;
pub const GFSDK_SSAO_DepthClampMode_GFSDK_SSAO_CLAMP_TO_EDGE: GFSDK_SSAO_DepthClampMode = 0;
pub const GFSDK_SSAO_DepthClampMode_GFSDK_SSAO_CLAMP_TO_BORDER: GFSDK_SSAO_DepthClampMode = 1;
pub type GFSDK_SSAO_DepthClampMode = i32;
pub const GFSDK_SSAO_MatrixLayout_GFSDK_SSAO_ROW_MAJOR_ORDER: GFSDK_SSAO_MatrixLayout = 0;
pub const GFSDK_SSAO_MatrixLayout_GFSDK_SSAO_COLUMN_MAJOR_ORDER: GFSDK_SSAO_MatrixLayout = 1;
pub type GFSDK_SSAO_MatrixLayout = i32;
pub const GFSDK_SSAO_RenderMask_GFSDK_SSAO_DRAW_Z: GFSDK_SSAO_RenderMask = 1;
pub const GFSDK_SSAO_RenderMask_GFSDK_SSAO_DRAW_AO: GFSDK_SSAO_RenderMask = 2;
pub const GFSDK_SSAO_RenderMask_GFSDK_SSAO_DRAW_DEBUG_N: GFSDK_SSAO_RenderMask = 4;
pub const GFSDK_SSAO_RenderMask_GFSDK_SSAO_DRAW_DEBUG_X: GFSDK_SSAO_RenderMask = 8;
pub const GFSDK_SSAO_RenderMask_GFSDK_SSAO_DRAW_DEBUG_Y: GFSDK_SSAO_RenderMask = 16;
pub const GFSDK_SSAO_RenderMask_GFSDK_SSAO_DRAW_DEBUG_Z: GFSDK_SSAO_RenderMask = 32;
pub const GFSDK_SSAO_RenderMask_GFSDK_SSAO_RENDER_AO: GFSDK_SSAO_RenderMask = 3;
pub const GFSDK_SSAO_RenderMask_GFSDK_SSAO_RENDER_DEBUG_NORMAL: GFSDK_SSAO_RenderMask = 5;
pub const GFSDK_SSAO_RenderMask_GFSDK_SSAO_RENDER_DEBUG_NORMAL_X: GFSDK_SSAO_RenderMask = 13;
pub const GFSDK_SSAO_RenderMask_GFSDK_SSAO_RENDER_DEBUG_NORMAL_Y: GFSDK_SSAO_RenderMask = 21;
pub const GFSDK_SSAO_RenderMask_GFSDK_SSAO_RENDER_DEBUG_NORMAL_Z: GFSDK_SSAO_RenderMask = 37;
pub type GFSDK_SSAO_RenderMask = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GFSDK_SSAO_ShaderResourceView_D3D12 {
    pub pResource: *mut ID3D12Resource,
    pub GpuHandle: GFSDK_SSAO_UINT64,
}
#[test]
fn bindgen_test_layout_GFSDK_SSAO_ShaderResourceView_D3D12() {
    assert_eq!(
        ::std::mem::size_of::<GFSDK_SSAO_ShaderResourceView_D3D12>(),
        16usize,
        concat!("Size of: ", stringify!(GFSDK_SSAO_ShaderResourceView_D3D12))
    );
    assert_eq!(
        ::std::mem::align_of::<GFSDK_SSAO_ShaderResourceView_D3D12>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(GFSDK_SSAO_ShaderResourceView_D3D12)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GFSDK_SSAO_ShaderResourceView_D3D12>())).pResource as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GFSDK_SSAO_ShaderResourceView_D3D12),
            "::",
            stringify!(pResource)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GFSDK_SSAO_ShaderResourceView_D3D12>())).GpuHandle as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GFSDK_SSAO_ShaderResourceView_D3D12),
            "::",
            stringify!(GpuHandle)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GFSDK_SSAO_RenderTargetView_D3D12 {
    pub pResource: *mut ID3D12Resource,
    pub CpuHandle: GFSDK_SSAO_SIZE_T,
}
#[test]
fn bindgen_test_layout_GFSDK_SSAO_RenderTargetView_D3D12() {
    assert_eq!(
        ::std::mem::size_of::<GFSDK_SSAO_RenderTargetView_D3D12>(),
        16usize,
        concat!("Size of: ", stringify!(GFSDK_SSAO_RenderTargetView_D3D12))
    );
    assert_eq!(
        ::std::mem::align_of::<GFSDK_SSAO_RenderTargetView_D3D12>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(GFSDK_SSAO_RenderTargetView_D3D12)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GFSDK_SSAO_RenderTargetView_D3D12>())).pResource as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GFSDK_SSAO_RenderTargetView_D3D12),
            "::",
            stringify!(pResource)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GFSDK_SSAO_RenderTargetView_D3D12>())).CpuHandle as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GFSDK_SSAO_RenderTargetView_D3D12),
            "::",
            stringify!(CpuHandle)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GFSDK_SSAO_Float4x4 {
    pub Array: [GFSDK_SSAO_FLOAT; 16usize],
}
#[test]
fn bindgen_test_layout_GFSDK_SSAO_Float4x4() {
    assert_eq!(
        ::std::mem::size_of::<GFSDK_SSAO_Float4x4>(),
        64usize,
        concat!("Size of: ", stringify!(GFSDK_SSAO_Float4x4))
    );
    assert_eq!(
        ::std::mem::align_of::<GFSDK_SSAO_Float4x4>(),
        4usize,
        concat!("Alignment of ", stringify!(GFSDK_SSAO_Float4x4))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GFSDK_SSAO_Float4x4>())).Array as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GFSDK_SSAO_Float4x4),
            "::",
            stringify!(Array)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GFSDK_SSAO_Matrix {
    pub Data: GFSDK_SSAO_Float4x4,
    pub Layout: GFSDK_SSAO_MatrixLayout,
}
#[test]
fn bindgen_test_layout_GFSDK_SSAO_Matrix() {
    assert_eq!(
        ::std::mem::size_of::<GFSDK_SSAO_Matrix>(),
        68usize,
        concat!("Size of: ", stringify!(GFSDK_SSAO_Matrix))
    );
    assert_eq!(
        ::std::mem::align_of::<GFSDK_SSAO_Matrix>(),
        4usize,
        concat!("Alignment of ", stringify!(GFSDK_SSAO_Matrix))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GFSDK_SSAO_Matrix>())).Data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GFSDK_SSAO_Matrix),
            "::",
            stringify!(Data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GFSDK_SSAO_Matrix>())).Layout as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(GFSDK_SSAO_Matrix),
            "::",
            stringify!(Layout)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GFSDK_SSAO_InputViewport {
    pub Enable: GFSDK_SSAO_BOOL,
    pub TopLeftX: GFSDK_SSAO_UINT,
    pub TopLeftY: GFSDK_SSAO_UINT,
    pub Width: GFSDK_SSAO_UINT,
    pub Height: GFSDK_SSAO_UINT,
    pub MinDepth: GFSDK_SSAO_FLOAT,
    pub MaxDepth: GFSDK_SSAO_FLOAT,
}
#[test]
fn bindgen_test_layout_GFSDK_SSAO_InputViewport() {
    assert_eq!(
        ::std::mem::size_of::<GFSDK_SSAO_InputViewport>(),
        28usize,
        concat!("Size of: ", stringify!(GFSDK_SSAO_InputViewport))
    );
    assert_eq!(
        ::std::mem::align_of::<GFSDK_SSAO_InputViewport>(),
        4usize,
        concat!("Alignment of ", stringify!(GFSDK_SSAO_InputViewport))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GFSDK_SSAO_InputViewport>())).Enable as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GFSDK_SSAO_InputViewport),
            "::",
            stringify!(Enable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GFSDK_SSAO_InputViewport>())).TopLeftX as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(GFSDK_SSAO_InputViewport),
            "::",
            stringify!(TopLeftX)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GFSDK_SSAO_InputViewport>())).TopLeftY as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GFSDK_SSAO_InputViewport),
            "::",
            stringify!(TopLeftY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GFSDK_SSAO_InputViewport>())).Width as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(GFSDK_SSAO_InputViewport),
            "::",
            stringify!(Width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GFSDK_SSAO_InputViewport>())).Height as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(GFSDK_SSAO_InputViewport),
            "::",
            stringify!(Height)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GFSDK_SSAO_InputViewport>())).MinDepth as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(GFSDK_SSAO_InputViewport),
            "::",
            stringify!(MinDepth)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GFSDK_SSAO_InputViewport>())).MaxDepth as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(GFSDK_SSAO_InputViewport),
            "::",
            stringify!(MaxDepth)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GFSDK_SSAO_InputDepthData {
    pub DepthTextureType: GFSDK_SSAO_DepthTextureType,
    pub ProjectionMatrix: GFSDK_SSAO_Matrix,
    pub MetersToViewSpaceUnits: GFSDK_SSAO_FLOAT,
    pub Viewport: GFSDK_SSAO_InputViewport,
}
#[test]
fn bindgen_test_layout_GFSDK_SSAO_InputDepthData() {
    assert_eq!(
        ::std::mem::size_of::<GFSDK_SSAO_InputDepthData>(),
        104usize,
        concat!("Size of: ", stringify!(GFSDK_SSAO_InputDepthData))
    );
    assert_eq!(
        ::std::mem::align_of::<GFSDK_SSAO_InputDepthData>(),
        4usize,
        concat!("Alignment of ", stringify!(GFSDK_SSAO_InputDepthData))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GFSDK_SSAO_InputDepthData>())).DepthTextureType as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GFSDK_SSAO_InputDepthData),
            "::",
            stringify!(DepthTextureType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GFSDK_SSAO_InputDepthData>())).ProjectionMatrix as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(GFSDK_SSAO_InputDepthData),
            "::",
            stringify!(ProjectionMatrix)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GFSDK_SSAO_InputDepthData>())).MetersToViewSpaceUnits as *const _
                as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(GFSDK_SSAO_InputDepthData),
            "::",
            stringify!(MetersToViewSpaceUnits)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GFSDK_SSAO_InputDepthData>())).Viewport as *const _ as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(GFSDK_SSAO_InputDepthData),
            "::",
            stringify!(Viewport)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GFSDK_SSAO_InputDepthData_D3D12 {
    pub _base: GFSDK_SSAO_InputDepthData,
    pub FullResDepthTextureSRV: GFSDK_SSAO_ShaderResourceView_D3D12,
    pub FullResDepthTexture2ndLayerSRV: GFSDK_SSAO_ShaderResourceView_D3D12,
}
#[test]
fn bindgen_test_layout_GFSDK_SSAO_InputDepthData_D3D12() {
    assert_eq!(
        ::std::mem::size_of::<GFSDK_SSAO_InputDepthData_D3D12>(),
        136usize,
        concat!("Size of: ", stringify!(GFSDK_SSAO_InputDepthData_D3D12))
    );
    assert_eq!(
        ::std::mem::align_of::<GFSDK_SSAO_InputDepthData_D3D12>(),
        8usize,
        concat!("Alignment of ", stringify!(GFSDK_SSAO_InputDepthData_D3D12))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GFSDK_SSAO_InputDepthData_D3D12>())).FullResDepthTextureSRV
                as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(GFSDK_SSAO_InputDepthData_D3D12),
            "::",
            stringify!(FullResDepthTextureSRV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GFSDK_SSAO_InputDepthData_D3D12>()))
                .FullResDepthTexture2ndLayerSRV as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(GFSDK_SSAO_InputDepthData_D3D12),
            "::",
            stringify!(FullResDepthTexture2ndLayerSRV)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GFSDK_SSAO_InputDepthData_D3D11 {
    pub _base: GFSDK_SSAO_InputDepthData,
    pub pFullResDepthTextureSRV: *mut ID3D11ShaderResourceView,
    pub pFullResDepthTexture2ndLayerSRV: *mut ID3D11ShaderResourceView,
}
#[test]
fn bindgen_test_layout_GFSDK_SSAO_InputDepthData_D3D11() {
    assert_eq!(
        ::std::mem::size_of::<GFSDK_SSAO_InputDepthData_D3D11>(),
        120usize,
        concat!("Size of: ", stringify!(GFSDK_SSAO_InputDepthData_D3D11))
    );
    assert_eq!(
        ::std::mem::align_of::<GFSDK_SSAO_InputDepthData_D3D11>(),
        8usize,
        concat!("Alignment of ", stringify!(GFSDK_SSAO_InputDepthData_D3D11))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GFSDK_SSAO_InputDepthData_D3D11>())).pFullResDepthTextureSRV
                as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(GFSDK_SSAO_InputDepthData_D3D11),
            "::",
            stringify!(pFullResDepthTextureSRV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GFSDK_SSAO_InputDepthData_D3D11>()))
                .pFullResDepthTexture2ndLayerSRV as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(GFSDK_SSAO_InputDepthData_D3D11),
            "::",
            stringify!(pFullResDepthTexture2ndLayerSRV)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GFSDK_SSAO_InputNormalData {
    pub Enable: GFSDK_SSAO_BOOL,
    pub WorldToViewMatrix: GFSDK_SSAO_Matrix,
    pub DecodeScale: GFSDK_SSAO_FLOAT,
    pub DecodeBias: GFSDK_SSAO_FLOAT,
}
#[test]
fn bindgen_test_layout_GFSDK_SSAO_InputNormalData() {
    assert_eq!(
        ::std::mem::size_of::<GFSDK_SSAO_InputNormalData>(),
        80usize,
        concat!("Size of: ", stringify!(GFSDK_SSAO_InputNormalData))
    );
    assert_eq!(
        ::std::mem::align_of::<GFSDK_SSAO_InputNormalData>(),
        4usize,
        concat!("Alignment of ", stringify!(GFSDK_SSAO_InputNormalData))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GFSDK_SSAO_InputNormalData>())).Enable as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GFSDK_SSAO_InputNormalData),
            "::",
            stringify!(Enable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GFSDK_SSAO_InputNormalData>())).WorldToViewMatrix as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(GFSDK_SSAO_InputNormalData),
            "::",
            stringify!(WorldToViewMatrix)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GFSDK_SSAO_InputNormalData>())).DecodeScale as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(GFSDK_SSAO_InputNormalData),
            "::",
            stringify!(DecodeScale)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GFSDK_SSAO_InputNormalData>())).DecodeBias as *const _ as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(GFSDK_SSAO_InputNormalData),
            "::",
            stringify!(DecodeBias)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GFSDK_SSAO_InputNormalData_D3D12 {
    pub _base: GFSDK_SSAO_InputNormalData,
    pub FullResNormalTextureSRV: GFSDK_SSAO_ShaderResourceView_D3D12,
}
#[test]
fn bindgen_test_layout_GFSDK_SSAO_InputNormalData_D3D12() {
    assert_eq!(
        ::std::mem::size_of::<GFSDK_SSAO_InputNormalData_D3D12>(),
        96usize,
        concat!("Size of: ", stringify!(GFSDK_SSAO_InputNormalData_D3D12))
    );
    assert_eq!(
        ::std::mem::align_of::<GFSDK_SSAO_InputNormalData_D3D12>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(GFSDK_SSAO_InputNormalData_D3D12)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GFSDK_SSAO_InputNormalData_D3D12>())).FullResNormalTextureSRV
                as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(GFSDK_SSAO_InputNormalData_D3D12),
            "::",
            stringify!(FullResNormalTextureSRV)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GFSDK_SSAO_InputNormalData_D3D11 {
    pub _base: GFSDK_SSAO_InputNormalData,
    pub pFullResNormalTextureSRV: *mut ID3D11ShaderResourceView,
}
#[test]
fn bindgen_test_layout_GFSDK_SSAO_InputNormalData_D3D11() {
    assert_eq!(
        ::std::mem::size_of::<GFSDK_SSAO_InputNormalData_D3D11>(),
        88usize,
        concat!("Size of: ", stringify!(GFSDK_SSAO_InputNormalData_D3D11))
    );
    assert_eq!(
        ::std::mem::align_of::<GFSDK_SSAO_InputNormalData_D3D11>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(GFSDK_SSAO_InputNormalData_D3D11)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GFSDK_SSAO_InputNormalData_D3D11>())).pFullResNormalTextureSRV
                as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(GFSDK_SSAO_InputNormalData_D3D11),
            "::",
            stringify!(pFullResNormalTextureSRV)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GFSDK_SSAO_InputData_D3D12 {
    pub DepthData: GFSDK_SSAO_InputDepthData_D3D12,
    pub NormalData: GFSDK_SSAO_InputNormalData_D3D12,
}
#[test]
fn bindgen_test_layout_GFSDK_SSAO_InputData_D3D12() {
    assert_eq!(
        ::std::mem::size_of::<GFSDK_SSAO_InputData_D3D12>(),
        232usize,
        concat!("Size of: ", stringify!(GFSDK_SSAO_InputData_D3D12))
    );
    assert_eq!(
        ::std::mem::align_of::<GFSDK_SSAO_InputData_D3D12>(),
        8usize,
        concat!("Alignment of ", stringify!(GFSDK_SSAO_InputData_D3D12))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GFSDK_SSAO_InputData_D3D12>())).DepthData as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GFSDK_SSAO_InputData_D3D12),
            "::",
            stringify!(DepthData)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GFSDK_SSAO_InputData_D3D12>())).NormalData as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(GFSDK_SSAO_InputData_D3D12),
            "::",
            stringify!(NormalData)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GFSDK_SSAO_InputData_D3D11 {
    pub DepthData: GFSDK_SSAO_InputDepthData_D3D11,
    pub NormalData: GFSDK_SSAO_InputNormalData_D3D11,
}
#[test]
fn bindgen_test_layout_GFSDK_SSAO_InputData_D3D11() {
    assert_eq!(
        ::std::mem::size_of::<GFSDK_SSAO_InputData_D3D11>(),
        208usize,
        concat!("Size of: ", stringify!(GFSDK_SSAO_InputData_D3D11))
    );
    assert_eq!(
        ::std::mem::align_of::<GFSDK_SSAO_InputData_D3D11>(),
        8usize,
        concat!("Alignment of ", stringify!(GFSDK_SSAO_InputData_D3D11))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GFSDK_SSAO_InputData_D3D11>())).DepthData as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GFSDK_SSAO_InputData_D3D11),
            "::",
            stringify!(DepthData)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GFSDK_SSAO_InputData_D3D11>())).NormalData as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(GFSDK_SSAO_InputData_D3D11),
            "::",
            stringify!(NormalData)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GFSDK_SSAO_ForegroundAO {
    pub Enable: GFSDK_SSAO_BOOL,
    pub ForegroundViewDepth: GFSDK_SSAO_FLOAT,
}
#[test]
fn bindgen_test_layout_GFSDK_SSAO_ForegroundAO() {
    assert_eq!(
        ::std::mem::size_of::<GFSDK_SSAO_ForegroundAO>(),
        8usize,
        concat!("Size of: ", stringify!(GFSDK_SSAO_ForegroundAO))
    );
    assert_eq!(
        ::std::mem::align_of::<GFSDK_SSAO_ForegroundAO>(),
        4usize,
        concat!("Alignment of ", stringify!(GFSDK_SSAO_ForegroundAO))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GFSDK_SSAO_ForegroundAO>())).Enable as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GFSDK_SSAO_ForegroundAO),
            "::",
            stringify!(Enable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GFSDK_SSAO_ForegroundAO>())).ForegroundViewDepth as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(GFSDK_SSAO_ForegroundAO),
            "::",
            stringify!(ForegroundViewDepth)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GFSDK_SSAO_BackgroundAO {
    pub Enable: GFSDK_SSAO_BOOL,
    pub BackgroundViewDepth: GFSDK_SSAO_FLOAT,
}
#[test]
fn bindgen_test_layout_GFSDK_SSAO_BackgroundAO() {
    assert_eq!(
        ::std::mem::size_of::<GFSDK_SSAO_BackgroundAO>(),
        8usize,
        concat!("Size of: ", stringify!(GFSDK_SSAO_BackgroundAO))
    );
    assert_eq!(
        ::std::mem::align_of::<GFSDK_SSAO_BackgroundAO>(),
        4usize,
        concat!("Alignment of ", stringify!(GFSDK_SSAO_BackgroundAO))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GFSDK_SSAO_BackgroundAO>())).Enable as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GFSDK_SSAO_BackgroundAO),
            "::",
            stringify!(Enable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GFSDK_SSAO_BackgroundAO>())).BackgroundViewDepth as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(GFSDK_SSAO_BackgroundAO),
            "::",
            stringify!(BackgroundViewDepth)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GFSDK_SSAO_DepthThreshold {
    pub Enable: GFSDK_SSAO_BOOL,
    pub MaxViewDepth: GFSDK_SSAO_FLOAT,
    pub Sharpness: GFSDK_SSAO_FLOAT,
}
#[test]
fn bindgen_test_layout_GFSDK_SSAO_DepthThreshold() {
    assert_eq!(
        ::std::mem::size_of::<GFSDK_SSAO_DepthThreshold>(),
        12usize,
        concat!("Size of: ", stringify!(GFSDK_SSAO_DepthThreshold))
    );
    assert_eq!(
        ::std::mem::align_of::<GFSDK_SSAO_DepthThreshold>(),
        4usize,
        concat!("Alignment of ", stringify!(GFSDK_SSAO_DepthThreshold))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GFSDK_SSAO_DepthThreshold>())).Enable as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GFSDK_SSAO_DepthThreshold),
            "::",
            stringify!(Enable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GFSDK_SSAO_DepthThreshold>())).MaxViewDepth as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(GFSDK_SSAO_DepthThreshold),
            "::",
            stringify!(MaxViewDepth)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GFSDK_SSAO_DepthThreshold>())).Sharpness as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GFSDK_SSAO_DepthThreshold),
            "::",
            stringify!(Sharpness)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GFSDK_SSAO_BlurSharpnessProfile {
    pub Enable: GFSDK_SSAO_BOOL,
    pub ForegroundSharpnessScale: GFSDK_SSAO_FLOAT,
    pub ForegroundViewDepth: GFSDK_SSAO_FLOAT,
    pub BackgroundViewDepth: GFSDK_SSAO_FLOAT,
}
#[test]
fn bindgen_test_layout_GFSDK_SSAO_BlurSharpnessProfile() {
    assert_eq!(
        ::std::mem::size_of::<GFSDK_SSAO_BlurSharpnessProfile>(),
        16usize,
        concat!("Size of: ", stringify!(GFSDK_SSAO_BlurSharpnessProfile))
    );
    assert_eq!(
        ::std::mem::align_of::<GFSDK_SSAO_BlurSharpnessProfile>(),
        4usize,
        concat!("Alignment of ", stringify!(GFSDK_SSAO_BlurSharpnessProfile))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GFSDK_SSAO_BlurSharpnessProfile>())).Enable as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GFSDK_SSAO_BlurSharpnessProfile),
            "::",
            stringify!(Enable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GFSDK_SSAO_BlurSharpnessProfile>())).ForegroundSharpnessScale
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(GFSDK_SSAO_BlurSharpnessProfile),
            "::",
            stringify!(ForegroundSharpnessScale)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GFSDK_SSAO_BlurSharpnessProfile>())).ForegroundViewDepth
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GFSDK_SSAO_BlurSharpnessProfile),
            "::",
            stringify!(ForegroundViewDepth)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GFSDK_SSAO_BlurSharpnessProfile>())).BackgroundViewDepth
                as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(GFSDK_SSAO_BlurSharpnessProfile),
            "::",
            stringify!(BackgroundViewDepth)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GFSDK_SSAO_BlurParameters {
    pub Enable: GFSDK_SSAO_BOOL,
    pub Radius: GFSDK_SSAO_BlurRadius,
    pub Sharpness: GFSDK_SSAO_FLOAT,
    pub SharpnessProfile: GFSDK_SSAO_BlurSharpnessProfile,
}
#[test]
fn bindgen_test_layout_GFSDK_SSAO_BlurParameters() {
    assert_eq!(
        ::std::mem::size_of::<GFSDK_SSAO_BlurParameters>(),
        28usize,
        concat!("Size of: ", stringify!(GFSDK_SSAO_BlurParameters))
    );
    assert_eq!(
        ::std::mem::align_of::<GFSDK_SSAO_BlurParameters>(),
        4usize,
        concat!("Alignment of ", stringify!(GFSDK_SSAO_BlurParameters))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GFSDK_SSAO_BlurParameters>())).Enable as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GFSDK_SSAO_BlurParameters),
            "::",
            stringify!(Enable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GFSDK_SSAO_BlurParameters>())).Radius as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(GFSDK_SSAO_BlurParameters),
            "::",
            stringify!(Radius)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GFSDK_SSAO_BlurParameters>())).Sharpness as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GFSDK_SSAO_BlurParameters),
            "::",
            stringify!(Sharpness)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GFSDK_SSAO_BlurParameters>())).SharpnessProfile as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(GFSDK_SSAO_BlurParameters),
            "::",
            stringify!(SharpnessProfile)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GFSDK_SSAO_Parameters {
    pub Radius: GFSDK_SSAO_FLOAT,
    pub Bias: GFSDK_SSAO_FLOAT,
    pub SmallScaleAO: GFSDK_SSAO_FLOAT,
    pub LargeScaleAO: GFSDK_SSAO_FLOAT,
    pub PowerExponent: GFSDK_SSAO_FLOAT,
    pub ForegroundAO: GFSDK_SSAO_ForegroundAO,
    pub BackgroundAO: GFSDK_SSAO_BackgroundAO,
    pub StepCount: GFSDK_SSAO_StepCount,
    pub DepthStorage: GFSDK_SSAO_DepthStorage,
    pub DepthClampMode: GFSDK_SSAO_DepthClampMode,
    pub DepthThreshold: GFSDK_SSAO_DepthThreshold,
    pub Blur: GFSDK_SSAO_BlurParameters,
    pub EnableDualLayerAO: GFSDK_SSAO_BOOL,
}
#[test]
fn bindgen_test_layout_GFSDK_SSAO_Parameters() {
    assert_eq!(
        ::std::mem::size_of::<GFSDK_SSAO_Parameters>(),
        92usize,
        concat!("Size of: ", stringify!(GFSDK_SSAO_Parameters))
    );
    assert_eq!(
        ::std::mem::align_of::<GFSDK_SSAO_Parameters>(),
        4usize,
        concat!("Alignment of ", stringify!(GFSDK_SSAO_Parameters))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GFSDK_SSAO_Parameters>())).Radius as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GFSDK_SSAO_Parameters),
            "::",
            stringify!(Radius)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GFSDK_SSAO_Parameters>())).Bias as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(GFSDK_SSAO_Parameters),
            "::",
            stringify!(Bias)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GFSDK_SSAO_Parameters>())).SmallScaleAO as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GFSDK_SSAO_Parameters),
            "::",
            stringify!(SmallScaleAO)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GFSDK_SSAO_Parameters>())).LargeScaleAO as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(GFSDK_SSAO_Parameters),
            "::",
            stringify!(LargeScaleAO)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GFSDK_SSAO_Parameters>())).PowerExponent as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(GFSDK_SSAO_Parameters),
            "::",
            stringify!(PowerExponent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GFSDK_SSAO_Parameters>())).ForegroundAO as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(GFSDK_SSAO_Parameters),
            "::",
            stringify!(ForegroundAO)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GFSDK_SSAO_Parameters>())).BackgroundAO as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(GFSDK_SSAO_Parameters),
            "::",
            stringify!(BackgroundAO)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GFSDK_SSAO_Parameters>())).StepCount as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(GFSDK_SSAO_Parameters),
            "::",
            stringify!(StepCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GFSDK_SSAO_Parameters>())).DepthStorage as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(GFSDK_SSAO_Parameters),
            "::",
            stringify!(DepthStorage)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GFSDK_SSAO_Parameters>())).DepthClampMode as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(GFSDK_SSAO_Parameters),
            "::",
            stringify!(DepthClampMode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GFSDK_SSAO_Parameters>())).DepthThreshold as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(GFSDK_SSAO_Parameters),
            "::",
            stringify!(DepthThreshold)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GFSDK_SSAO_Parameters>())).Blur as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(GFSDK_SSAO_Parameters),
            "::",
            stringify!(Blur)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GFSDK_SSAO_Parameters>())).EnableDualLayerAO as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(GFSDK_SSAO_Parameters),
            "::",
            stringify!(EnableDualLayerAO)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GFSDK_SSAO_CustomBlendState_D3D12 {
    pub pBlendState: *mut D3D12_BLEND_DESC,
    pub pBlendFactor: *const GFSDK_SSAO_FLOAT,
}
#[test]
fn bindgen_test_layout_GFSDK_SSAO_CustomBlendState_D3D12() {
    assert_eq!(
        ::std::mem::size_of::<GFSDK_SSAO_CustomBlendState_D3D12>(),
        16usize,
        concat!("Size of: ", stringify!(GFSDK_SSAO_CustomBlendState_D3D12))
    );
    assert_eq!(
        ::std::mem::align_of::<GFSDK_SSAO_CustomBlendState_D3D12>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(GFSDK_SSAO_CustomBlendState_D3D12)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GFSDK_SSAO_CustomBlendState_D3D12>())).pBlendState as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GFSDK_SSAO_CustomBlendState_D3D12),
            "::",
            stringify!(pBlendState)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GFSDK_SSAO_CustomBlendState_D3D12>())).pBlendFactor as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GFSDK_SSAO_CustomBlendState_D3D12),
            "::",
            stringify!(pBlendFactor)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GFSDK_SSAO_CustomBlendState_D3D11 {
    pub pBlendState: *mut ID3D11BlendState,
    pub pBlendFactor: *const GFSDK_SSAO_FLOAT,
}
#[test]
fn bindgen_test_layout_GFSDK_SSAO_CustomBlendState_D3D11() {
    assert_eq!(
        ::std::mem::size_of::<GFSDK_SSAO_CustomBlendState_D3D11>(),
        16usize,
        concat!("Size of: ", stringify!(GFSDK_SSAO_CustomBlendState_D3D11))
    );
    assert_eq!(
        ::std::mem::align_of::<GFSDK_SSAO_CustomBlendState_D3D11>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(GFSDK_SSAO_CustomBlendState_D3D11)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GFSDK_SSAO_CustomBlendState_D3D11>())).pBlendState as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GFSDK_SSAO_CustomBlendState_D3D11),
            "::",
            stringify!(pBlendState)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GFSDK_SSAO_CustomBlendState_D3D11>())).pBlendFactor as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GFSDK_SSAO_CustomBlendState_D3D11),
            "::",
            stringify!(pBlendFactor)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GFSDK_SSAO_BlendState_D3D12 {
    pub Mode: GFSDK_SSAO_BlendMode,
    pub CustomState: GFSDK_SSAO_CustomBlendState_D3D12,
}
#[test]
fn bindgen_test_layout_GFSDK_SSAO_BlendState_D3D12() {
    assert_eq!(
        ::std::mem::size_of::<GFSDK_SSAO_BlendState_D3D12>(),
        24usize,
        concat!("Size of: ", stringify!(GFSDK_SSAO_BlendState_D3D12))
    );
    assert_eq!(
        ::std::mem::align_of::<GFSDK_SSAO_BlendState_D3D12>(),
        8usize,
        concat!("Alignment of ", stringify!(GFSDK_SSAO_BlendState_D3D12))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GFSDK_SSAO_BlendState_D3D12>())).Mode as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GFSDK_SSAO_BlendState_D3D12),
            "::",
            stringify!(Mode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GFSDK_SSAO_BlendState_D3D12>())).CustomState as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GFSDK_SSAO_BlendState_D3D12),
            "::",
            stringify!(CustomState)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GFSDK_SSAO_BlendState_D3D11 {
    pub Mode: GFSDK_SSAO_BlendMode,
    pub CustomState: GFSDK_SSAO_CustomBlendState_D3D11,
}
#[test]
fn bindgen_test_layout_GFSDK_SSAO_BlendState_D3D11() {
    assert_eq!(
        ::std::mem::size_of::<GFSDK_SSAO_BlendState_D3D11>(),
        24usize,
        concat!("Size of: ", stringify!(GFSDK_SSAO_BlendState_D3D11))
    );
    assert_eq!(
        ::std::mem::align_of::<GFSDK_SSAO_BlendState_D3D11>(),
        8usize,
        concat!("Alignment of ", stringify!(GFSDK_SSAO_BlendState_D3D11))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GFSDK_SSAO_BlendState_D3D11>())).Mode as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GFSDK_SSAO_BlendState_D3D11),
            "::",
            stringify!(Mode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GFSDK_SSAO_BlendState_D3D11>())).CustomState as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GFSDK_SSAO_BlendState_D3D11),
            "::",
            stringify!(CustomState)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GFSDK_SSAO_CustomDepthStencilState_D3D11 {
    pub pDepthStencilState: *mut ID3D11DepthStencilState,
    pub StencilRef: GFSDK_SSAO_UINT,
}
#[test]
fn bindgen_test_layout_GFSDK_SSAO_CustomDepthStencilState_D3D11() {
    assert_eq!(
        ::std::mem::size_of::<GFSDK_SSAO_CustomDepthStencilState_D3D11>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(GFSDK_SSAO_CustomDepthStencilState_D3D11)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<GFSDK_SSAO_CustomDepthStencilState_D3D11>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(GFSDK_SSAO_CustomDepthStencilState_D3D11)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GFSDK_SSAO_CustomDepthStencilState_D3D11>())).pDepthStencilState
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GFSDK_SSAO_CustomDepthStencilState_D3D11),
            "::",
            stringify!(pDepthStencilState)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GFSDK_SSAO_CustomDepthStencilState_D3D11>())).StencilRef
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GFSDK_SSAO_CustomDepthStencilState_D3D11),
            "::",
            stringify!(StencilRef)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GFSDK_SSAO_DepthStencilState_D3D11 {
    pub Mode: GFSDK_SSAO_DepthStencilMode,
    pub CustomState: GFSDK_SSAO_CustomDepthStencilState_D3D11,
}
#[test]
fn bindgen_test_layout_GFSDK_SSAO_DepthStencilState_D3D11() {
    assert_eq!(
        ::std::mem::size_of::<GFSDK_SSAO_DepthStencilState_D3D11>(),
        24usize,
        concat!("Size of: ", stringify!(GFSDK_SSAO_DepthStencilState_D3D11))
    );
    assert_eq!(
        ::std::mem::align_of::<GFSDK_SSAO_DepthStencilState_D3D11>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(GFSDK_SSAO_DepthStencilState_D3D11)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GFSDK_SSAO_DepthStencilState_D3D11>())).Mode as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GFSDK_SSAO_DepthStencilState_D3D11),
            "::",
            stringify!(Mode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GFSDK_SSAO_DepthStencilState_D3D11>())).CustomState as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GFSDK_SSAO_DepthStencilState_D3D11),
            "::",
            stringify!(CustomState)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GFSDK_SSAO_Output_D3D12 {
    pub pRenderTargetView: *mut GFSDK_SSAO_RenderTargetView_D3D12,
    pub Blend: GFSDK_SSAO_BlendState_D3D12,
}
#[test]
fn bindgen_test_layout_GFSDK_SSAO_Output_D3D12() {
    assert_eq!(
        ::std::mem::size_of::<GFSDK_SSAO_Output_D3D12>(),
        32usize,
        concat!("Size of: ", stringify!(GFSDK_SSAO_Output_D3D12))
    );
    assert_eq!(
        ::std::mem::align_of::<GFSDK_SSAO_Output_D3D12>(),
        8usize,
        concat!("Alignment of ", stringify!(GFSDK_SSAO_Output_D3D12))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GFSDK_SSAO_Output_D3D12>())).pRenderTargetView as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GFSDK_SSAO_Output_D3D12),
            "::",
            stringify!(pRenderTargetView)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GFSDK_SSAO_Output_D3D12>())).Blend as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GFSDK_SSAO_Output_D3D12),
            "::",
            stringify!(Blend)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GFSDK_SSAO_Output_D3D11 {
    pub pRenderTargetView: *mut ID3D11RenderTargetView,
    pub Blend: GFSDK_SSAO_BlendState_D3D11,
}
#[test]
fn bindgen_test_layout_GFSDK_SSAO_Output_D3D11() {
    assert_eq!(
        ::std::mem::size_of::<GFSDK_SSAO_Output_D3D11>(),
        32usize,
        concat!("Size of: ", stringify!(GFSDK_SSAO_Output_D3D11))
    );
    assert_eq!(
        ::std::mem::align_of::<GFSDK_SSAO_Output_D3D11>(),
        8usize,
        concat!("Alignment of ", stringify!(GFSDK_SSAO_Output_D3D11))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GFSDK_SSAO_Output_D3D11>())).pRenderTargetView as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GFSDK_SSAO_Output_D3D11),
            "::",
            stringify!(pRenderTargetView)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GFSDK_SSAO_Output_D3D11>())).Blend as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GFSDK_SSAO_Output_D3D11),
            "::",
            stringify!(Blend)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GFSDK_SSAO_CustomHeap {
    pub new_:
        ::std::option::Option<unsafe extern "C" fn(arg1: usize) -> *mut ::std::os::raw::c_void>,
    pub delete_: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
}
#[test]
fn bindgen_test_layout_GFSDK_SSAO_CustomHeap() {
    assert_eq!(
        ::std::mem::size_of::<GFSDK_SSAO_CustomHeap>(),
        16usize,
        concat!("Size of: ", stringify!(GFSDK_SSAO_CustomHeap))
    );
    assert_eq!(
        ::std::mem::align_of::<GFSDK_SSAO_CustomHeap>(),
        8usize,
        concat!("Alignment of ", stringify!(GFSDK_SSAO_CustomHeap))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GFSDK_SSAO_CustomHeap>())).new_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GFSDK_SSAO_CustomHeap),
            "::",
            stringify!(new_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GFSDK_SSAO_CustomHeap>())).delete_ as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GFSDK_SSAO_CustomHeap),
            "::",
            stringify!(delete_)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GFSDK_SSAO_ProjectionMatrixDepthRange {
    pub ZNear: GFSDK_SSAO_FLOAT,
    pub ZFar: GFSDK_SSAO_FLOAT,
}
#[test]
fn bindgen_test_layout_GFSDK_SSAO_ProjectionMatrixDepthRange() {
    assert_eq!(
        ::std::mem::size_of::<GFSDK_SSAO_ProjectionMatrixDepthRange>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(GFSDK_SSAO_ProjectionMatrixDepthRange)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<GFSDK_SSAO_ProjectionMatrixDepthRange>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(GFSDK_SSAO_ProjectionMatrixDepthRange)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GFSDK_SSAO_ProjectionMatrixDepthRange>())).ZNear as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GFSDK_SSAO_ProjectionMatrixDepthRange),
            "::",
            stringify!(ZNear)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GFSDK_SSAO_ProjectionMatrixDepthRange>())).ZFar as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(GFSDK_SSAO_ProjectionMatrixDepthRange),
            "::",
            stringify!(ZFar)
        )
    );
}
#[repr(C)]
pub struct GFSDK_SSAO_Context__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GFSDK_SSAO_Context {
    pub vtable_: *const GFSDK_SSAO_Context__bindgen_vtable,
}
#[test]
fn bindgen_test_layout_GFSDK_SSAO_Context() {
    assert_eq!(
        ::std::mem::size_of::<GFSDK_SSAO_Context>(),
        8usize,
        concat!("Size of: ", stringify!(GFSDK_SSAO_Context))
    );
    assert_eq!(
        ::std::mem::align_of::<GFSDK_SSAO_Context>(),
        8usize,
        concat!("Alignment of ", stringify!(GFSDK_SSAO_Context))
    );
}
extern "C" {
    pub fn GFSDK_SSAO_GetVersion(pVersion: *mut GFSDK_SSAO_Version) -> GFSDK_SSAO_Status;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GFSDK_SSAO_Context_D3D11 {
    pub _base: GFSDK_SSAO_Context,
}
#[test]
fn bindgen_test_layout_GFSDK_SSAO_Context_D3D11() {
    assert_eq!(
        ::std::mem::size_of::<GFSDK_SSAO_Context_D3D11>(),
        8usize,
        concat!("Size of: ", stringify!(GFSDK_SSAO_Context_D3D11))
    );
    assert_eq!(
        ::std::mem::align_of::<GFSDK_SSAO_Context_D3D11>(),
        8usize,
        concat!("Alignment of ", stringify!(GFSDK_SSAO_Context_D3D11))
    );
}
extern "C" {
    pub fn GFSDK_SSAO_CreateContext_D3D11(
        pD3DDevice: *mut ID3D11Device,
        ppContext: *mut *mut GFSDK_SSAO_Context_D3D11,
        pCustomHeap: *const GFSDK_SSAO_CustomHeap,
        HeaderVersion: GFSDK_SSAO_Version,
    ) -> GFSDK_SSAO_Status;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GFSDK_SSAO_Context_D3D12 {
    pub _base: GFSDK_SSAO_Context,
}
#[test]
fn bindgen_test_layout_GFSDK_SSAO_Context_D3D12() {
    assert_eq!(
        ::std::mem::size_of::<GFSDK_SSAO_Context_D3D12>(),
        8usize,
        concat!("Size of: ", stringify!(GFSDK_SSAO_Context_D3D12))
    );
    assert_eq!(
        ::std::mem::align_of::<GFSDK_SSAO_Context_D3D12>(),
        8usize,
        concat!("Alignment of ", stringify!(GFSDK_SSAO_Context_D3D12))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GFSDK_SSAO_DescriptorHeapRange_D3D12 {
    pub pDescHeap: *mut ID3D12DescriptorHeap,
    pub BaseIndex: GFSDK_SSAO_UINT,
}
#[test]
fn bindgen_test_layout_GFSDK_SSAO_DescriptorHeapRange_D3D12() {
    assert_eq!(
        ::std::mem::size_of::<GFSDK_SSAO_DescriptorHeapRange_D3D12>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(GFSDK_SSAO_DescriptorHeapRange_D3D12)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<GFSDK_SSAO_DescriptorHeapRange_D3D12>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(GFSDK_SSAO_DescriptorHeapRange_D3D12)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GFSDK_SSAO_DescriptorHeapRange_D3D12>())).pDescHeap as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GFSDK_SSAO_DescriptorHeapRange_D3D12),
            "::",
            stringify!(pDescHeap)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GFSDK_SSAO_DescriptorHeapRange_D3D12>())).BaseIndex as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GFSDK_SSAO_DescriptorHeapRange_D3D12),
            "::",
            stringify!(BaseIndex)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GFSDK_SSAO_DescriptorHeaps_D3D12 {
    pub CBV_SRV_UAV: GFSDK_SSAO_DescriptorHeapRange_D3D12,
    pub RTV: GFSDK_SSAO_DescriptorHeapRange_D3D12,
}
#[test]
fn bindgen_test_layout_GFSDK_SSAO_DescriptorHeaps_D3D12() {
    assert_eq!(
        ::std::mem::size_of::<GFSDK_SSAO_DescriptorHeaps_D3D12>(),
        32usize,
        concat!("Size of: ", stringify!(GFSDK_SSAO_DescriptorHeaps_D3D12))
    );
    assert_eq!(
        ::std::mem::align_of::<GFSDK_SSAO_DescriptorHeaps_D3D12>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(GFSDK_SSAO_DescriptorHeaps_D3D12)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GFSDK_SSAO_DescriptorHeaps_D3D12>())).CBV_SRV_UAV as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GFSDK_SSAO_DescriptorHeaps_D3D12),
            "::",
            stringify!(CBV_SRV_UAV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GFSDK_SSAO_DescriptorHeaps_D3D12>())).RTV as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(GFSDK_SSAO_DescriptorHeaps_D3D12),
            "::",
            stringify!(RTV)
        )
    );
}
extern "C" {
    pub fn GFSDK_SSAO_CreateContext_D3D12(
        pD3DDevice: *mut ID3D12Device,
        NodeMask: GFSDK_SSAO_UINT,
        DescriptorHeaps: *const GFSDK_SSAO_DescriptorHeaps_D3D12,
        ppContext: *mut *mut GFSDK_SSAO_Context_D3D12,
        pCustomHeap: *const GFSDK_SSAO_CustomHeap,
        HeaderVersion: GFSDK_SSAO_Version,
    ) -> GFSDK_SSAO_Status;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HBAO {
    pub heap: GFSDK_SSAO_CustomHeap,
    pub input: GFSDK_SSAO_InputData_D3D11,
    pub context: *mut GFSDK_SSAO_Context_D3D11,
    pub parameters: GFSDK_SSAO_Parameters,
    pub output: GFSDK_SSAO_Output_D3D11,
}
#[test]
fn bindgen_test_layout_HBAO() {
    assert_eq!(
        ::std::mem::size_of::<HBAO>(),
        360usize,
        concat!("Size of: ", stringify!(HBAO))
    );
    assert_eq!(
        ::std::mem::align_of::<HBAO>(),
        8usize,
        concat!("Alignment of ", stringify!(HBAO))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HBAO>())).heap as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(HBAO),
            "::",
            stringify!(heap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HBAO>())).input as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(HBAO),
            "::",
            stringify!(input)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HBAO>())).context as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(HBAO),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HBAO>())).parameters as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(HBAO),
            "::",
            stringify!(parameters)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HBAO>())).output as *const _ as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(HBAO),
            "::",
            stringify!(output)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}?RenderAO@HBAO@@QEAAHPEAUID3D11DeviceContext@@@Z"]
    pub fn HBAO_RenderAO(
        this: *mut HBAO,
        context: *mut ID3D11DeviceContext,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}??0HBAO@@QEAA@PEAUID3D11Device@@PEAUID3D11ShaderResourceView@@PEAUID3D11RenderTargetView@@QEAM@Z"]
    pub fn HBAO_HBAO(
        this: *mut HBAO,
        device: *mut ID3D11Device,
        depthView: *mut ID3D11ShaderResourceView,
        renderView: *mut ID3D11RenderTargetView,
        projection: *mut f32,
    );
}
impl HBAO {
    #[inline]
    pub unsafe fn RenderAO(&mut self, context: *mut ID3D11DeviceContext) -> ::std::os::raw::c_int {
        HBAO_RenderAO(self, context)
    }
    #[inline]
    pub unsafe fn new(
        device: *mut ID3D11Device,
        depthView: *mut ID3D11ShaderResourceView,
        renderView: *mut ID3D11RenderTargetView,
        projection: *mut f32,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        HBAO_HBAO(
            __bindgen_tmp.as_mut_ptr(),
            device,
            depthView,
            renderView,
            projection,
        );
        __bindgen_tmp.assume_init()
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_multibyte_data {
    pub _address: u8,
}
